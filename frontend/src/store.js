//https://youtu.be/iBUJVy8phqw?si=LNACXlrqdKBaSdvv  to start with redux

import {configureStore} from "@reduxjs/toolkit";
import { apiSlice } from "./slices/apiSlice";
import cartSliceReducer from "./slices/cartSlice";
import authSliceReducer from "./slices/authSlice";
const store = configureStore({
    reducer: { //In Redux, a "reducer" is a function that determines how the application's state should change in response to actions. Think of it as a set of instructions for updating the state. You provide this function to Redux, and it gets called whenever an action is dispatched
        [apiSlice.reducerPath]:apiSlice.reducer, /* Redux Toolkit Query generates a special reducer specifically for handling API data. This reducer knows how to update the state when API data changes.

        The [apiSlice.reducerPath] syntax creates a property key in your store's state. It's like saying, "Hey, the data managed by Redux Toolkit Query should live under this specific name in the store's state."
        
        You're associating the reducer generated by Redux Toolkit Query (apiSlice.reducer) with that specific property key. So, whenever you make API requests and receive data, Redux Toolkit Query knows where to put that data in the store.  */
        cart: cartSliceReducer,
        auth: authSliceReducer,
    },
    middleware: (getDefaultMiddleware) => { //Middleware is a concept in Redux that lets you intercept actions before they reach the reducer. You can think of middleware as a series of processing steps for actions. It's like a pit stop where you can modify, log, or cancel actions before they affect the state.
        return getDefaultMiddleware().concat(apiSlice.middleware) /* getDefaultMiddleware() is a function that gives you the default set of middleware provided by Redux Toolkit. These defaults include things like action logging and handling async actions.

        .concat(apiSlice.middleware) means you're adding Redux Toolkit Query's middleware to the default middleware stack. This middleware is responsible for handling API requests and managing the state related to those requests.
        
        So, in simpler terms, you're saying, "Use the default middleware provided by Redux Toolkit, and also add Redux Toolkit Query's special middleware to handle API requests." This ensures that when you make API requests, Redux Toolkit Query can do its magic to manage the data and state properly. */
    },
    devTools: true, //devTools: You're enabling the Redux DevTools extension for debugging purposes. This allows you to inspect the state and actions in your Redux store using the Redux DevTools extension in your browser.
});

export default store;